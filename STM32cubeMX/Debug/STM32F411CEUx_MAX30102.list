
STM32F411CEUx_MAX30102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002340  08002340  00003340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002358  08002358  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002358  08002358  00003358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002360  08002360  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002360  08002360  00003360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002364  08002364  00003364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002368  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  08002374  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08002374  00004160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdd5  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de1  00000000  00000000  0000fe11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00011bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a0  00000000  00000000  00012708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a7f  00000000  00000000  00012fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f307  00000000  00000000  00028a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085df7  00000000  00000000  00037d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdb25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d4c  00000000  00000000  000bdb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  000c08b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002328 	.word	0x08002328

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002328 	.word	0x08002328

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000560 <MX_GPIO_Init+0x98>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000560 <MX_GPIO_Init+0x98>)
 80004e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000560 <MX_GPIO_Init+0x98>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	4b18      	ldr	r3, [pc, #96]	@ (8000560 <MX_GPIO_Init+0x98>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a17      	ldr	r2, [pc, #92]	@ (8000560 <MX_GPIO_Init+0x98>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
 800050a:	4b15      	ldr	r3, [pc, #84]	@ (8000560 <MX_GPIO_Init+0x98>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	4b11      	ldr	r3, [pc, #68]	@ (8000560 <MX_GPIO_Init+0x98>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <MX_GPIO_Init+0x98>)
 8000520:	f043 0302 	orr.w	r3, r3, #2
 8000524:	6313      	str	r3, [r2, #48]	@ 0x30
 8000526:	4b0e      	ldr	r3, [pc, #56]	@ (8000560 <MX_GPIO_Init+0x98>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2110      	movs	r1, #16
 8000536:	480b      	ldr	r0, [pc, #44]	@ (8000564 <MX_GPIO_Init+0x9c>)
 8000538:	f000 fdca 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800053c:	2310      	movs	r3, #16
 800053e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	4804      	ldr	r0, [pc, #16]	@ (8000564 <MX_GPIO_Init+0x9c>)
 8000554:	f000 fc38 	bl	8000dc8 <HAL_GPIO_Init>

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40023800 	.word	0x40023800
 8000564:	40020000 	.word	0x40020000

08000568 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800056c:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <MX_I2C1_Init+0x50>)
 800056e:	4a13      	ldr	r2, [pc, #76]	@ (80005bc <MX_I2C1_Init+0x54>)
 8000570:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000572:	4b11      	ldr	r3, [pc, #68]	@ (80005b8 <MX_I2C1_Init+0x50>)
 8000574:	4a12      	ldr	r2, [pc, #72]	@ (80005c0 <MX_I2C1_Init+0x58>)
 8000576:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000578:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <MX_I2C1_Init+0x50>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800057e:	4b0e      	ldr	r3, [pc, #56]	@ (80005b8 <MX_I2C1_Init+0x50>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000584:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <MX_I2C1_Init+0x50>)
 8000586:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800058a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800058c:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <MX_I2C1_Init+0x50>)
 800058e:	2200      	movs	r2, #0
 8000590:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <MX_I2C1_Init+0x50>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000598:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <MX_I2C1_Init+0x50>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <MX_I2C1_Init+0x50>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005a4:	4804      	ldr	r0, [pc, #16]	@ (80005b8 <MX_I2C1_Init+0x50>)
 80005a6:	f000 fdad 	bl	8001104 <HAL_I2C_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005b0:	f000 f8ca 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000028 	.word	0x20000028
 80005bc:	40005400 	.word	0x40005400
 80005c0:	00061a80 	.word	0x00061a80

080005c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	@ 0x28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a19      	ldr	r2, [pc, #100]	@ (8000648 <HAL_I2C_MspInit+0x84>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d12b      	bne.n	800063e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
 80005ea:	4b18      	ldr	r3, [pc, #96]	@ (800064c <HAL_I2C_MspInit+0x88>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a17      	ldr	r2, [pc, #92]	@ (800064c <HAL_I2C_MspInit+0x88>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <HAL_I2C_MspInit+0x88>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAX30102_I2C1_SCL_Pin|MAX30102_I2C1_SDA_Pin;
 8000602:	23c0      	movs	r3, #192	@ 0xc0
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000606:	2312      	movs	r3, #18
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060e:	2303      	movs	r3, #3
 8000610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000612:	2304      	movs	r3, #4
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480c      	ldr	r0, [pc, #48]	@ (8000650 <HAL_I2C_MspInit+0x8c>)
 800061e:	f000 fbd3 	bl	8000dc8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <HAL_I2C_MspInit+0x88>)
 8000628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062a:	4a08      	ldr	r2, [pc, #32]	@ (800064c <HAL_I2C_MspInit+0x88>)
 800062c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000630:	6413      	str	r3, [r2, #64]	@ 0x40
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <HAL_I2C_MspInit+0x88>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000636:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800063e:	bf00      	nop
 8000640:	3728      	adds	r7, #40	@ 0x28
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40005400 	.word	0x40005400
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fa5e 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f80c 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ff32 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000664:	f7ff ff80 	bl	8000568 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000668:	f000 f874 	bl	8000754 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800066c:	f000 f95a 	bl	8000924 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000670:	f000 f982 	bl	8000978 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <main+0x20>

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	@ 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	2230      	movs	r2, #48	@ 0x30
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fe22 	bl	80022d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemClock_Config+0xc8>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a4:	4a26      	ldr	r2, [pc, #152]	@ (8000740 <SystemClock_Config+0xc8>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <SystemClock_Config+0xc8>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <SystemClock_Config+0xcc>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a20      	ldr	r2, [pc, #128]	@ (8000744 <SystemClock_Config+0xcc>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <SystemClock_Config+0xcc>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006e8:	230c      	movs	r3, #12
 80006ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006ec:	2360      	movs	r3, #96	@ 0x60
 80006ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fe45 	bl	800138c <HAL_RCC_OscConfig>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000708:	f000 f81e 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070c:	230f      	movs	r3, #15
 800070e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000710:	2302      	movs	r3, #2
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800071c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2103      	movs	r1, #3
 8000728:	4618      	mov	r0, r3
 800072a:	f001 f8a7 	bl	800187c <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000734:	f000 f808 	bl	8000748 <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3750      	adds	r7, #80	@ 0x50
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <Error_Handler+0x8>

08000754 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000758:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800075a:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <MX_SPI1_Init+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075e:	4b16      	ldr	r3, [pc, #88]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000760:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000772:	4b11      	ldr	r3, [pc, #68]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000778:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077e:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000786:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <MX_SPI1_Init+0x64>)
 80007a0:	220a      	movs	r2, #10
 80007a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <MX_SPI1_Init+0x64>)
 80007a6:	f001 fa49 	bl	8001c3c <HAL_SPI_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b0:	f7ff ffca 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000007c 	.word	0x2000007c
 80007bc:	40013000 	.word	0x40013000

080007c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	@ 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a19      	ldr	r2, [pc, #100]	@ (8000844 <HAL_SPI_MspInit+0x84>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d12b      	bne.n	800083a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <HAL_SPI_MspInit+0x88>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ea:	4a17      	ldr	r2, [pc, #92]	@ (8000848 <HAL_SPI_MspInit+0x88>)
 80007ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007f2:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <HAL_SPI_MspInit+0x88>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <HAL_SPI_MspInit+0x88>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a10      	ldr	r2, [pc, #64]	@ (8000848 <HAL_SPI_MspInit+0x88>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <HAL_SPI_MspInit+0x88>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800081a:	23e0      	movs	r3, #224	@ 0xe0
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	2302      	movs	r3, #2
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000826:	2303      	movs	r3, #3
 8000828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800082a:	2305      	movs	r3, #5
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	4805      	ldr	r0, [pc, #20]	@ (800084c <HAL_SPI_MspInit+0x8c>)
 8000836:	f000 fac7 	bl	8000dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800083a:	bf00      	nop
 800083c:	3728      	adds	r7, #40	@ 0x28
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40013000 	.word	0x40013000
 8000848:	40023800 	.word	0x40023800
 800084c:	40020000 	.word	0x40020000

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	4a0f      	ldr	r2, [pc, #60]	@ (800089c <HAL_MspInit+0x4c>)
 8000860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000864:	6453      	str	r3, [r2, #68]	@ 0x44
 8000866:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_MspInit+0x4c>)
 800087c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000880:	6413      	str	r3, [r2, #64]	@ 0x40
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <NMI_Handler+0x4>

080008a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <MemManage_Handler+0x4>

080008b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f6:	f000 f961 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	@ (8000974 <MX_USART1_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_USART1_UART_Init+0x4c>)
 800095c:	f001 f9f7 	bl	8001d4e <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f7ff feef 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000d4 	.word	0x200000d4
 8000974:	40011000 	.word	0x40011000

08000978 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	@ (80009c8 <MX_USART2_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <MX_USART2_UART_Init+0x4c>)
 80009b0:	f001 f9cd 	bl	8001d4e <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f7ff fec5 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000118 	.word	0x20000118
 80009c8:	40004400 	.word	0x40004400

080009cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	@ 0x30
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a32      	ldr	r2, [pc, #200]	@ (8000ab4 <HAL_UART_MspInit+0xe8>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12d      	bne.n	8000a4a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
 80009f2:	4b31      	ldr	r3, [pc, #196]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	4a30      	ldr	r2, [pc, #192]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 80009f8:	f043 0310 	orr.w	r3, r3, #16
 80009fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fe:	4b2e      	ldr	r3, [pc, #184]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	61bb      	str	r3, [r7, #24]
 8000a08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a29      	ldr	r2, [pc, #164]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b27      	ldr	r3, [pc, #156]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	617b      	str	r3, [r7, #20]
 8000a24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_USART1_TX_Pin|DEBUG_USART1_RX_Pin;
 8000a26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	481e      	ldr	r0, [pc, #120]	@ (8000abc <HAL_UART_MspInit+0xf0>)
 8000a44:	f000 f9c0 	bl	8000dc8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a48:	e030      	b.n	8000aac <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <HAL_UART_MspInit+0xf4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d12b      	bne.n	8000aac <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a16      	ldr	r2, [pc, #88]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 8000a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a78:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <HAL_UART_MspInit+0xec>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ESP8266_USART2_TX_Pin|ESP8266_USART2_RX_Pin;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <HAL_UART_MspInit+0xf0>)
 8000aa8:	f000 f98e 	bl	8000dc8 <HAL_GPIO_Init>
}
 8000aac:	bf00      	nop
 8000aae:	3730      	adds	r7, #48	@ 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40011000 	.word	0x40011000
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40004400 	.word	0x40004400

08000ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aca:	490e      	ldr	r1, [pc, #56]	@ (8000b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000acc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0b      	ldr	r2, [pc, #44]	@ (8000b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae0:	4c0b      	ldr	r4, [pc, #44]	@ (8000b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aee:	f7ff ff07 	bl	8000900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f001 fbf5 	bl	80022e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af6:	f7ff fdad 	bl	8000654 <main>
  bx  lr    
 8000afa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b08:	08002368 	.word	0x08002368
  ldr r2, =_sbss
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b10:	20000160 	.word	0x20000160

08000b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <HAL_Init+0x40>)
 8000b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b28:	4b0b      	ldr	r3, [pc, #44]	@ (8000b58 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <HAL_Init+0x40>)
 8000b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <HAL_Init+0x40>)
 8000b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f90d 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b46:	200f      	movs	r0, #15
 8000b48:	f000 f808 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4c:	f7ff fe80 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023c00 	.word	0x40023c00

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <HAL_InitTick+0x54>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_InitTick+0x58>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f917 	bl	8000dae <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f000 f8ed 	bl	8000d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	@ (8000bb8 <HAL_InitTick+0x5c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	2000015c 	.word	0x2000015c

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	2000015c 	.word	0x2000015c

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	@ (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	@ (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	@ (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	@ (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	@ 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	@ 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f7ff ff8e 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff47 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff5c 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff8e 	bl	8000cb4 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5d 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffb0 	bl	8000d1c <SysTick_Config>
 8000dbc:	4603      	mov	r3, r0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	e159      	b.n	8001098 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	f040 8148 	bne.w	8001092 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d005      	beq.n	8000e1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d130      	bne.n	8000e7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	091b      	lsrs	r3, r3, #4
 8000e66:	f003 0201 	and.w	r2, r3, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d017      	beq.n	8000eb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d123      	bne.n	8000f0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	08da      	lsrs	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	69b9      	ldr	r1, [r7, #24]
 8000f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0203 	and.w	r2, r3, #3
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 80a2 	beq.w	8001092 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b57      	ldr	r3, [pc, #348]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f56:	4a56      	ldr	r2, [pc, #344]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5e:	4b54      	ldr	r3, [pc, #336]	@ (80010b0 <HAL_GPIO_Init+0x2e8>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f6a:	4a52      	ldr	r2, [pc, #328]	@ (80010b4 <HAL_GPIO_Init+0x2ec>)
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	089b      	lsrs	r3, r3, #2
 8000f70:	3302      	adds	r3, #2
 8000f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a49      	ldr	r2, [pc, #292]	@ (80010b8 <HAL_GPIO_Init+0x2f0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0x202>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a48      	ldr	r2, [pc, #288]	@ (80010bc <HAL_GPIO_Init+0x2f4>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x1fe>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a47      	ldr	r2, [pc, #284]	@ (80010c0 <HAL_GPIO_Init+0x2f8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x1fa>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a46      	ldr	r2, [pc, #280]	@ (80010c4 <HAL_GPIO_Init+0x2fc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x1f6>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a45      	ldr	r2, [pc, #276]	@ (80010c8 <HAL_GPIO_Init+0x300>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x1f2>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e008      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fba:	2307      	movs	r3, #7
 8000fbc:	e006      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e004      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e002      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <HAL_GPIO_Init+0x204>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	f002 0203 	and.w	r2, r2, #3
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	4093      	lsls	r3, r2
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fdc:	4935      	ldr	r1, [pc, #212]	@ (80010b4 <HAL_GPIO_Init+0x2ec>)
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fea:	4b38      	ldr	r3, [pc, #224]	@ (80010cc <HAL_GPIO_Init+0x304>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100e:	4a2f      	ldr	r2, [pc, #188]	@ (80010cc <HAL_GPIO_Init+0x304>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001014:	4b2d      	ldr	r3, [pc, #180]	@ (80010cc <HAL_GPIO_Init+0x304>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001038:	4a24      	ldr	r2, [pc, #144]	@ (80010cc <HAL_GPIO_Init+0x304>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103e:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <HAL_GPIO_Init+0x304>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001062:	4a1a      	ldr	r2, [pc, #104]	@ (80010cc <HAL_GPIO_Init+0x304>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <HAL_GPIO_Init+0x304>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800108c:	4a0f      	ldr	r2, [pc, #60]	@ (80010cc <HAL_GPIO_Init+0x304>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3301      	adds	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	f67f aea2 	bls.w	8000de4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3724      	adds	r7, #36	@ 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020c00 	.word	0x40020c00
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40013c00 	.word	0x40013c00

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ec:	e003      	b.n	80010f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	041a      	lsls	r2, r3, #16
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	619a      	str	r2, [r3, #24]
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e12b      	b.n	800136e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d106      	bne.n	8001130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fa4a 	bl	80005c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2224      	movs	r2, #36	@ 0x24
 8001134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001168:	f000 fd40 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 800116c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4a81      	ldr	r2, [pc, #516]	@ (8001378 <HAL_I2C_Init+0x274>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d807      	bhi.n	8001188 <HAL_I2C_Init+0x84>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4a80      	ldr	r2, [pc, #512]	@ (800137c <HAL_I2C_Init+0x278>)
 800117c:	4293      	cmp	r3, r2
 800117e:	bf94      	ite	ls
 8001180:	2301      	movls	r3, #1
 8001182:	2300      	movhi	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	e006      	b.n	8001196 <HAL_I2C_Init+0x92>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4a7d      	ldr	r2, [pc, #500]	@ (8001380 <HAL_I2C_Init+0x27c>)
 800118c:	4293      	cmp	r3, r2
 800118e:	bf94      	ite	ls
 8001190:	2301      	movls	r3, #1
 8001192:	2300      	movhi	r3, #0
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e0e7      	b.n	800136e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4a78      	ldr	r2, [pc, #480]	@ (8001384 <HAL_I2C_Init+0x280>)
 80011a2:	fba2 2303 	umull	r2, r3, r2, r3
 80011a6:	0c9b      	lsrs	r3, r3, #18
 80011a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	4a6a      	ldr	r2, [pc, #424]	@ (8001378 <HAL_I2C_Init+0x274>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d802      	bhi.n	80011d8 <HAL_I2C_Init+0xd4>
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	3301      	adds	r3, #1
 80011d6:	e009      	b.n	80011ec <HAL_I2C_Init+0xe8>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80011de:	fb02 f303 	mul.w	r3, r2, r3
 80011e2:	4a69      	ldr	r2, [pc, #420]	@ (8001388 <HAL_I2C_Init+0x284>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	099b      	lsrs	r3, r3, #6
 80011ea:	3301      	adds	r3, #1
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	430b      	orrs	r3, r1
 80011f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80011fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	495c      	ldr	r1, [pc, #368]	@ (8001378 <HAL_I2C_Init+0x274>)
 8001208:	428b      	cmp	r3, r1
 800120a:	d819      	bhi.n	8001240 <HAL_I2C_Init+0x13c>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	1e59      	subs	r1, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fbb1 f3f3 	udiv	r3, r1, r3
 800121a:	1c59      	adds	r1, r3, #1
 800121c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001220:	400b      	ands	r3, r1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00a      	beq.n	800123c <HAL_I2C_Init+0x138>
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1e59      	subs	r1, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fbb1 f3f3 	udiv	r3, r1, r3
 8001234:	3301      	adds	r3, #1
 8001236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800123a:	e051      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 800123c:	2304      	movs	r3, #4
 800123e:	e04f      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d111      	bne.n	800126c <HAL_I2C_Init+0x168>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	440b      	add	r3, r1
 8001256:	fbb0 f3f3 	udiv	r3, r0, r3
 800125a:	3301      	adds	r3, #1
 800125c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	e012      	b.n	8001292 <HAL_I2C_Init+0x18e>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	0099      	lsls	r1, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001282:	3301      	adds	r3, #1
 8001284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_I2C_Init+0x196>
 8001296:	2301      	movs	r3, #1
 8001298:	e022      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10e      	bne.n	80012c0 <HAL_I2C_Init+0x1bc>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1e58      	subs	r0, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6859      	ldr	r1, [r3, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	440b      	add	r3, r1
 80012b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b4:	3301      	adds	r3, #1
 80012b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012be:	e00f      	b.n	80012e0 <HAL_I2C_Init+0x1dc>
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	1e58      	subs	r0, r3, #1
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	440b      	add	r3, r1
 80012ce:	0099      	lsls	r1, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80012d6:	3301      	adds	r3, #1
 80012d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012e0:	6879      	ldr	r1, [r7, #4]
 80012e2:	6809      	ldr	r1, [r1, #0]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69da      	ldr	r2, [r3, #28]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	431a      	orrs	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800130e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6911      	ldr	r1, [r2, #16]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68d2      	ldr	r2, [r2, #12]
 800131a:	4311      	orrs	r1, r2
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	430b      	orrs	r3, r1
 8001322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0201 	orr.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2220      	movs	r2, #32
 800135a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	000186a0 	.word	0x000186a0
 800137c:	001e847f 	.word	0x001e847f
 8001380:	003d08ff 	.word	0x003d08ff
 8001384:	431bde83 	.word	0x431bde83
 8001388:	10624dd3 	.word	0x10624dd3

0800138c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e267      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d075      	beq.n	8001496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013aa:	4b88      	ldr	r3, [pc, #544]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d00c      	beq.n	80013d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b6:	4b85      	ldr	r3, [pc, #532]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013be:	2b08      	cmp	r3, #8
 80013c0:	d112      	bne.n	80013e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013c2:	4b82      	ldr	r3, [pc, #520]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013ce:	d10b      	bne.n	80013e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d0:	4b7e      	ldr	r3, [pc, #504]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d05b      	beq.n	8001494 <HAL_RCC_OscConfig+0x108>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d157      	bne.n	8001494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e242      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f0:	d106      	bne.n	8001400 <HAL_RCC_OscConfig+0x74>
 80013f2:	4b76      	ldr	r3, [pc, #472]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a75      	ldr	r2, [pc, #468]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e01d      	b.n	800143c <HAL_RCC_OscConfig+0xb0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001408:	d10c      	bne.n	8001424 <HAL_RCC_OscConfig+0x98>
 800140a:	4b70      	ldr	r3, [pc, #448]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a6f      	ldr	r2, [pc, #444]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	4b6d      	ldr	r3, [pc, #436]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a6c      	ldr	r2, [pc, #432]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800141c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e00b      	b.n	800143c <HAL_RCC_OscConfig+0xb0>
 8001424:	4b69      	ldr	r3, [pc, #420]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a68      	ldr	r2, [pc, #416]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800142a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b66      	ldr	r3, [pc, #408]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a65      	ldr	r2, [pc, #404]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800143a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d013      	beq.n	800146c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fbce 	bl	8000be4 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fbca 	bl	8000be4 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	@ 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e207      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145e:	4b5b      	ldr	r3, [pc, #364]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0xc0>
 800146a:	e014      	b.n	8001496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fbba 	bl	8000be4 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fbb6 	bl	8000be4 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e1f3      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001486:	4b51      	ldr	r3, [pc, #324]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1f0      	bne.n	8001474 <HAL_RCC_OscConfig+0xe8>
 8001492:	e000      	b.n	8001496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d063      	beq.n	800156a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014a2:	4b4a      	ldr	r3, [pc, #296]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ae:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d11c      	bne.n	80014f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ba:	4b44      	ldr	r3, [pc, #272]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d116      	bne.n	80014f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c6:	4b41      	ldr	r3, [pc, #260]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <HAL_RCC_OscConfig+0x152>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d001      	beq.n	80014de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e1c7      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014de:	4b3b      	ldr	r3, [pc, #236]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691b      	ldr	r3, [r3, #16]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4937      	ldr	r1, [pc, #220]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f2:	e03a      	b.n	800156a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d020      	beq.n	800153e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fc:	4b34      	ldr	r3, [pc, #208]	@ (80015d0 <HAL_RCC_OscConfig+0x244>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff fb6f 	bl	8000be4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fb6b 	bl	8000be4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e1a8      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151c:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	4925      	ldr	r1, [pc, #148]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]
 800153c:	e015      	b.n	800156a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153e:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <HAL_RCC_OscConfig+0x244>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fb4e 	bl	8000be4 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff fb4a 	bl	8000be4 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e187      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d036      	beq.n	80015e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d016      	beq.n	80015ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_RCC_OscConfig+0x248>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fb2e 	bl	8000be4 <HAL_GetTick>
 8001588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fb2a 	bl	8000be4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e167      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_RCC_OscConfig+0x240>)
 80015a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x200>
 80015aa:	e01b      	b.n	80015e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ac:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_RCC_OscConfig+0x248>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fb17 	bl	8000be4 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b8:	e00e      	b.n	80015d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ba:	f7ff fb13 	bl	8000be4 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d907      	bls.n	80015d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e150      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
 80015cc:	40023800 	.word	0x40023800
 80015d0:	42470000 	.word	0x42470000
 80015d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b88      	ldr	r3, [pc, #544]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80015da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ea      	bne.n	80015ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8097 	beq.w	8001720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b81      	ldr	r3, [pc, #516]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10f      	bne.n	8001622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
 8001606:	4b7d      	ldr	r3, [pc, #500]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a7c      	ldr	r2, [pc, #496]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b7a      	ldr	r3, [pc, #488]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161e:	2301      	movs	r3, #1
 8001620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001622:	4b77      	ldr	r3, [pc, #476]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d118      	bne.n	8001660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162e:	4b74      	ldr	r3, [pc, #464]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a73      	ldr	r2, [pc, #460]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163a:	f7ff fad3 	bl	8000be4 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001642:	f7ff facf 	bl	8000be4 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e10c      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001654:	4b6a      	ldr	r3, [pc, #424]	@ (8001800 <HAL_RCC_OscConfig+0x474>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165c:	2b00      	cmp	r3, #0
 800165e:	d0f0      	beq.n	8001642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x2ea>
 8001668:	4b64      	ldr	r3, [pc, #400]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800166a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800166c:	4a63      	ldr	r2, [pc, #396]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6713      	str	r3, [r2, #112]	@ 0x70
 8001674:	e01c      	b.n	80016b0 <HAL_RCC_OscConfig+0x324>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b05      	cmp	r3, #5
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x30c>
 800167e:	4b5f      	ldr	r3, [pc, #380]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001682:	4a5e      	ldr	r2, [pc, #376]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6713      	str	r3, [r2, #112]	@ 0x70
 800168a:	4b5c      	ldr	r3, [pc, #368]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168e:	4a5b      	ldr	r2, [pc, #364]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6713      	str	r3, [r2, #112]	@ 0x70
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0x324>
 8001698:	4b58      	ldr	r3, [pc, #352]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169c:	4a57      	ldr	r2, [pc, #348]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a4:	4b55      	ldr	r3, [pc, #340]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a8:	4a54      	ldr	r2, [pc, #336]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d015      	beq.n	80016e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff fa94 	bl	8000be4 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016be:	e00a      	b.n	80016d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c0:	f7ff fa90 	bl	8000be4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0cb      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d6:	4b49      	ldr	r3, [pc, #292]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0ee      	beq.n	80016c0 <HAL_RCC_OscConfig+0x334>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e4:	f7ff fa7e 	bl	8000be4 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7ff fa7a 	bl	8000be4 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e0b5      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001702:	4b3e      	ldr	r3, [pc, #248]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ee      	bne.n	80016ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d105      	bne.n	8001720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001714:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	4a38      	ldr	r2, [pc, #224]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800171a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800171e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80a1 	beq.w	800186c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800172a:	4b34      	ldr	r3, [pc, #208]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b08      	cmp	r3, #8
 8001734:	d05c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d141      	bne.n	80017c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <HAL_RCC_OscConfig+0x478>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fa4e 	bl	8000be4 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff fa4a 	bl	8000be4 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e087      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175e:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	431a      	orrs	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	019b      	lsls	r3, r3, #6
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001780:	085b      	lsrs	r3, r3, #1
 8001782:	3b01      	subs	r3, #1
 8001784:	041b      	lsls	r3, r3, #16
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	491b      	ldr	r1, [pc, #108]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001794:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <HAL_RCC_OscConfig+0x478>)
 8001796:	2201      	movs	r2, #1
 8001798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179a:	f7ff fa23 	bl	8000be4 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a2:	f7ff fa1f 	bl	8000be4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e05c      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0f0      	beq.n	80017a2 <HAL_RCC_OscConfig+0x416>
 80017c0:	e054      	b.n	800186c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <HAL_RCC_OscConfig+0x478>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff fa0c 	bl	8000be4 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d0:	f7ff fa08 	bl	8000be4 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e045      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_OscConfig+0x470>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f0      	bne.n	80017d0 <HAL_RCC_OscConfig+0x444>
 80017ee:	e03d      	b.n	800186c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d107      	bne.n	8001808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e038      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
 80017fc:	40023800 	.word	0x40023800
 8001800:	40007000 	.word	0x40007000
 8001804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001808:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <HAL_RCC_OscConfig+0x4ec>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d028      	beq.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d121      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d11a      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001838:	4013      	ands	r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800183e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001840:	4293      	cmp	r3, r2
 8001842:	d111      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184e:	085b      	lsrs	r3, r3, #1
 8001850:	3b01      	subs	r3, #1
 8001852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d107      	bne.n	8001868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e000      	b.n	800186e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0cc      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b68      	ldr	r3, [pc, #416]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d90c      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b65      	ldr	r3, [pc, #404]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b63      	ldr	r3, [pc, #396]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0b8      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d0:	4b59      	ldr	r3, [pc, #356]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a58      	ldr	r2, [pc, #352]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e8:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4a52      	ldr	r2, [pc, #328]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f4:	4b50      	ldr	r3, [pc, #320]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	494d      	ldr	r1, [pc, #308]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	4313      	orrs	r3, r2
 8001904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d044      	beq.n	800199c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b47      	ldr	r3, [pc, #284]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d119      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e07f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d003      	beq.n	800193a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001936:	2b03      	cmp	r3, #3
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e06f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800194a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e067      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800195a:	4b37      	ldr	r3, [pc, #220]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 0203 	bic.w	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4934      	ldr	r1, [pc, #208]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800196c:	f7ff f93a 	bl	8000be4 <HAL_GetTick>
 8001970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	e00a      	b.n	800198a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff f936 	bl	8000be4 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e04f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 020c 	and.w	r2, r3, #12
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	429a      	cmp	r2, r3
 800199a:	d1eb      	bne.n	8001974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d20c      	bcs.n	80019c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e032      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4916      	ldr	r1, [pc, #88]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ee:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	490e      	ldr	r1, [pc, #56]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a02:	f000 f821 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	490a      	ldr	r1, [pc, #40]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	5ccb      	ldrb	r3, [r1, r3]
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	4a09      	ldr	r2, [pc, #36]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f89a 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40023c00 	.word	0x40023c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	08002340 	.word	0x08002340
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a4c:	b090      	sub	sp, #64	@ 0x40
 8001a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a54:	2300      	movs	r3, #0
 8001a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a58:	2300      	movs	r3, #0
 8001a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a60:	4b59      	ldr	r3, [pc, #356]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d00d      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x40>
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	f200 80a1 	bhi.w	8001bb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x34>
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a7a:	e09b      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b53      	ldr	r3, [pc, #332]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8001a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001a80:	e09b      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a82:	4b53      	ldr	r3, [pc, #332]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a86:	e098      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a88:	4b4f      	ldr	r3, [pc, #316]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a90:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a92:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d028      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	623b      	str	r3, [r7, #32]
 8001aa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4b47      	ldr	r3, [pc, #284]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ab4:	fb03 f201 	mul.w	r2, r3, r1
 8001ab8:	2300      	movs	r3, #0
 8001aba:	fb00 f303 	mul.w	r3, r0, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a43      	ldr	r2, [pc, #268]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ac2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ac8:	460a      	mov	r2, r1
 8001aca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ace:	4413      	add	r3, r2
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	61fa      	str	r2, [r7, #28]
 8001ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ade:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ae2:	f7fe fb79 	bl	80001d8 <__aeabi_uldivmod>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4613      	mov	r3, r2
 8001aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001aee:	e053      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af0:	4b35      	ldr	r3, [pc, #212]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	099b      	lsrs	r3, r3, #6
 8001af6:	2200      	movs	r2, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	617a      	str	r2, [r7, #20]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b02:	f04f 0b00 	mov.w	fp, #0
 8001b06:	4652      	mov	r2, sl
 8001b08:	465b      	mov	r3, fp
 8001b0a:	f04f 0000 	mov.w	r0, #0
 8001b0e:	f04f 0100 	mov.w	r1, #0
 8001b12:	0159      	lsls	r1, r3, #5
 8001b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b18:	0150      	lsls	r0, r2, #5
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	ebb2 080a 	subs.w	r8, r2, sl
 8001b22:	eb63 090b 	sbc.w	r9, r3, fp
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b3a:	ebb2 0408 	subs.w	r4, r2, r8
 8001b3e:	eb63 0509 	sbc.w	r5, r3, r9
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	00eb      	lsls	r3, r5, #3
 8001b4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b50:	00e2      	lsls	r2, r4, #3
 8001b52:	4614      	mov	r4, r2
 8001b54:	461d      	mov	r5, r3
 8001b56:	eb14 030a 	adds.w	r3, r4, sl
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	eb45 030b 	adc.w	r3, r5, fp
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b6e:	4629      	mov	r1, r5
 8001b70:	028b      	lsls	r3, r1, #10
 8001b72:	4621      	mov	r1, r4
 8001b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b78:	4621      	mov	r1, r4
 8001b7a:	028a      	lsls	r2, r1, #10
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b82:	2200      	movs	r2, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	60fa      	str	r2, [r7, #12]
 8001b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b8c:	f7fe fb24 	bl	80001d8 <__aeabi_uldivmod>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4613      	mov	r3, r2
 8001b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b98:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	0c1b      	lsrs	r3, r3, #16
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001ba8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bb2:	e002      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8001bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3740      	adds	r7, #64	@ 0x40
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	00f42400 	.word	0x00f42400
 8001bd0:	017d7840 	.word	0x017d7840

08001bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000

08001bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bf0:	f7ff fff0 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	0a9b      	lsrs	r3, r3, #10
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	4903      	ldr	r1, [pc, #12]	@ (8001c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c02:	5ccb      	ldrb	r3, [r1, r3]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	08002350 	.word	0x08002350

08001c14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c18:	f7ff ffdc 	bl	8001bd4 <HAL_RCC_GetHCLKFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0b5b      	lsrs	r3, r3, #13
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	4903      	ldr	r1, [pc, #12]	@ (8001c38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	08002350 	.word	0x08002350

08001c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e07b      	b.n	8001d46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d108      	bne.n	8001c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c5e:	d009      	beq.n	8001c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
 8001c66:	e005      	b.n	8001c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7fe fd96 	bl	80007c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001caa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf8:	ea42 0103 	orr.w	r1, r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	f003 0104 	and.w	r1, r3, #4
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	f003 0210 	and.w	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69da      	ldr	r2, [r3, #28]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e03f      	b.n	8001de0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d106      	bne.n	8001d7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7fe fe29 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2224      	movs	r2, #36	@ 0x24
 8001d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f828 	bl	8001de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001da6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001db6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001dc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dec:	b0c0      	sub	sp, #256	@ 0x100
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e04:	68d9      	ldr	r1, [r3, #12]
 8001e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	ea40 0301 	orr.w	r3, r0, r1
 8001e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	431a      	orrs	r2, r3
 8001e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001e40:	f021 010c 	bic.w	r1, r1, #12
 8001e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001e4e:	430b      	orrs	r3, r1
 8001e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e62:	6999      	ldr	r1, [r3, #24]
 8001e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	ea40 0301 	orr.w	r3, r0, r1
 8001e6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4b8f      	ldr	r3, [pc, #572]	@ (80020b4 <UART_SetConfig+0x2cc>)
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d005      	beq.n	8001e88 <UART_SetConfig+0xa0>
 8001e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b8d      	ldr	r3, [pc, #564]	@ (80020b8 <UART_SetConfig+0x2d0>)
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d104      	bne.n	8001e92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e88:	f7ff fec4 	bl	8001c14 <HAL_RCC_GetPCLK2Freq>
 8001e8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001e90:	e003      	b.n	8001e9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e92:	f7ff feab 	bl	8001bec <HAL_RCC_GetPCLK1Freq>
 8001e96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ea4:	f040 810c 	bne.w	80020c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001eac:	2200      	movs	r2, #0
 8001eae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001eb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001eb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001eba:	4622      	mov	r2, r4
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	1891      	adds	r1, r2, r2
 8001ec0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001ec2:	415b      	adcs	r3, r3
 8001ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ec6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001eca:	4621      	mov	r1, r4
 8001ecc:	eb12 0801 	adds.w	r8, r2, r1
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	eb43 0901 	adc.w	r9, r3, r1
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eea:	4690      	mov	r8, r2
 8001eec:	4699      	mov	r9, r3
 8001eee:	4623      	mov	r3, r4
 8001ef0:	eb18 0303 	adds.w	r3, r8, r3
 8001ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001ef8:	462b      	mov	r3, r5
 8001efa:	eb49 0303 	adc.w	r3, r9, r3
 8001efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001f16:	460b      	mov	r3, r1
 8001f18:	18db      	adds	r3, r3, r3
 8001f1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	eb42 0303 	adc.w	r3, r2, r3
 8001f22:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001f2c:	f7fe f954 	bl	80001d8 <__aeabi_uldivmod>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4b61      	ldr	r3, [pc, #388]	@ (80020bc <UART_SetConfig+0x2d4>)
 8001f36:	fba3 2302 	umull	r2, r3, r3, r2
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	011c      	lsls	r4, r3, #4
 8001f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f42:	2200      	movs	r2, #0
 8001f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001f48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001f4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001f50:	4642      	mov	r2, r8
 8001f52:	464b      	mov	r3, r9
 8001f54:	1891      	adds	r1, r2, r2
 8001f56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001f58:	415b      	adcs	r3, r3
 8001f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f60:	4641      	mov	r1, r8
 8001f62:	eb12 0a01 	adds.w	sl, r2, r1
 8001f66:	4649      	mov	r1, r9
 8001f68:	eb43 0b01 	adc.w	fp, r3, r1
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	f04f 0300 	mov.w	r3, #0
 8001f74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f80:	4692      	mov	sl, r2
 8001f82:	469b      	mov	fp, r3
 8001f84:	4643      	mov	r3, r8
 8001f86:	eb1a 0303 	adds.w	r3, sl, r3
 8001f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f8e:	464b      	mov	r3, r9
 8001f90:	eb4b 0303 	adc.w	r3, fp, r3
 8001f94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001fa4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001fa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001fac:	460b      	mov	r3, r1
 8001fae:	18db      	adds	r3, r3, r3
 8001fb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	eb42 0303 	adc.w	r3, r2, r3
 8001fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001fbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001fc2:	f7fe f909 	bl	80001d8 <__aeabi_uldivmod>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80020bc <UART_SetConfig+0x2d4>)
 8001fce:	fba3 2301 	umull	r2, r3, r3, r1
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	2264      	movs	r2, #100	@ 0x64
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	1acb      	subs	r3, r1, r3
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001fe2:	4b36      	ldr	r3, [pc, #216]	@ (80020bc <UART_SetConfig+0x2d4>)
 8001fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001ff0:	441c      	add	r4, r3
 8001ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ffc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002000:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002004:	4642      	mov	r2, r8
 8002006:	464b      	mov	r3, r9
 8002008:	1891      	adds	r1, r2, r2
 800200a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800200c:	415b      	adcs	r3, r3
 800200e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002014:	4641      	mov	r1, r8
 8002016:	1851      	adds	r1, r2, r1
 8002018:	6339      	str	r1, [r7, #48]	@ 0x30
 800201a:	4649      	mov	r1, r9
 800201c:	414b      	adcs	r3, r1
 800201e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800202c:	4659      	mov	r1, fp
 800202e:	00cb      	lsls	r3, r1, #3
 8002030:	4651      	mov	r1, sl
 8002032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002036:	4651      	mov	r1, sl
 8002038:	00ca      	lsls	r2, r1, #3
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	4603      	mov	r3, r0
 8002040:	4642      	mov	r2, r8
 8002042:	189b      	adds	r3, r3, r2
 8002044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002048:	464b      	mov	r3, r9
 800204a:	460a      	mov	r2, r1
 800204c:	eb42 0303 	adc.w	r3, r2, r3
 8002050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002060:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002068:	460b      	mov	r3, r1
 800206a:	18db      	adds	r3, r3, r3
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800206e:	4613      	mov	r3, r2
 8002070:	eb42 0303 	adc.w	r3, r2, r3
 8002074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800207a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800207e:	f7fe f8ab 	bl	80001d8 <__aeabi_uldivmod>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <UART_SetConfig+0x2d4>)
 8002088:	fba3 1302 	umull	r1, r3, r3, r2
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	2164      	movs	r1, #100	@ 0x64
 8002090:	fb01 f303 	mul.w	r3, r1, r3
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	3332      	adds	r3, #50	@ 0x32
 800209a:	4a08      	ldr	r2, [pc, #32]	@ (80020bc <UART_SetConfig+0x2d4>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	f003 0207 	and.w	r2, r3, #7
 80020a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4422      	add	r2, r4
 80020ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020b0:	e106      	b.n	80022c0 <UART_SetConfig+0x4d8>
 80020b2:	bf00      	nop
 80020b4:	40011000 	.word	0x40011000
 80020b8:	40011400 	.word	0x40011400
 80020bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020c4:	2200      	movs	r2, #0
 80020c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80020ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80020ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80020d2:	4642      	mov	r2, r8
 80020d4:	464b      	mov	r3, r9
 80020d6:	1891      	adds	r1, r2, r2
 80020d8:	6239      	str	r1, [r7, #32]
 80020da:	415b      	adcs	r3, r3
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80020de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020e2:	4641      	mov	r1, r8
 80020e4:	1854      	adds	r4, r2, r1
 80020e6:	4649      	mov	r1, r9
 80020e8:	eb43 0501 	adc.w	r5, r3, r1
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	00eb      	lsls	r3, r5, #3
 80020f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020fa:	00e2      	lsls	r2, r4, #3
 80020fc:	4614      	mov	r4, r2
 80020fe:	461d      	mov	r5, r3
 8002100:	4643      	mov	r3, r8
 8002102:	18e3      	adds	r3, r4, r3
 8002104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002108:	464b      	mov	r3, r9
 800210a:	eb45 0303 	adc.w	r3, r5, r3
 800210e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800211e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800212e:	4629      	mov	r1, r5
 8002130:	008b      	lsls	r3, r1, #2
 8002132:	4621      	mov	r1, r4
 8002134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002138:	4621      	mov	r1, r4
 800213a:	008a      	lsls	r2, r1, #2
 800213c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002140:	f7fe f84a 	bl	80001d8 <__aeabi_uldivmod>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4b60      	ldr	r3, [pc, #384]	@ (80022cc <UART_SetConfig+0x4e4>)
 800214a:	fba3 2302 	umull	r2, r3, r3, r2
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	011c      	lsls	r4, r3, #4
 8002152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002156:	2200      	movs	r2, #0
 8002158:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800215c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002160:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002164:	4642      	mov	r2, r8
 8002166:	464b      	mov	r3, r9
 8002168:	1891      	adds	r1, r2, r2
 800216a:	61b9      	str	r1, [r7, #24]
 800216c:	415b      	adcs	r3, r3
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002174:	4641      	mov	r1, r8
 8002176:	1851      	adds	r1, r2, r1
 8002178:	6139      	str	r1, [r7, #16]
 800217a:	4649      	mov	r1, r9
 800217c:	414b      	adcs	r3, r1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800218c:	4659      	mov	r1, fp
 800218e:	00cb      	lsls	r3, r1, #3
 8002190:	4651      	mov	r1, sl
 8002192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002196:	4651      	mov	r1, sl
 8002198:	00ca      	lsls	r2, r1, #3
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	4603      	mov	r3, r0
 80021a0:	4642      	mov	r2, r8
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80021a8:	464b      	mov	r3, r9
 80021aa:	460a      	mov	r2, r1
 80021ac:	eb42 0303 	adc.w	r3, r2, r3
 80021b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80021b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80021cc:	4649      	mov	r1, r9
 80021ce:	008b      	lsls	r3, r1, #2
 80021d0:	4641      	mov	r1, r8
 80021d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021d6:	4641      	mov	r1, r8
 80021d8:	008a      	lsls	r2, r1, #2
 80021da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80021de:	f7fd fffb 	bl	80001d8 <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4611      	mov	r1, r2
 80021e8:	4b38      	ldr	r3, [pc, #224]	@ (80022cc <UART_SetConfig+0x4e4>)
 80021ea:	fba3 2301 	umull	r2, r3, r3, r1
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2264      	movs	r2, #100	@ 0x64
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	1acb      	subs	r3, r1, r3
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	3332      	adds	r3, #50	@ 0x32
 80021fc:	4a33      	ldr	r2, [pc, #204]	@ (80022cc <UART_SetConfig+0x4e4>)
 80021fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002208:	441c      	add	r4, r3
 800220a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800220e:	2200      	movs	r2, #0
 8002210:	673b      	str	r3, [r7, #112]	@ 0x70
 8002212:	677a      	str	r2, [r7, #116]	@ 0x74
 8002214:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002218:	4642      	mov	r2, r8
 800221a:	464b      	mov	r3, r9
 800221c:	1891      	adds	r1, r2, r2
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	415b      	adcs	r3, r3
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002228:	4641      	mov	r1, r8
 800222a:	1851      	adds	r1, r2, r1
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	4649      	mov	r1, r9
 8002230:	414b      	adcs	r3, r1
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002240:	4659      	mov	r1, fp
 8002242:	00cb      	lsls	r3, r1, #3
 8002244:	4651      	mov	r1, sl
 8002246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800224a:	4651      	mov	r1, sl
 800224c:	00ca      	lsls	r2, r1, #3
 800224e:	4610      	mov	r0, r2
 8002250:	4619      	mov	r1, r3
 8002252:	4603      	mov	r3, r0
 8002254:	4642      	mov	r2, r8
 8002256:	189b      	adds	r3, r3, r2
 8002258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800225a:	464b      	mov	r3, r9
 800225c:	460a      	mov	r2, r1
 800225e:	eb42 0303 	adc.w	r3, r2, r3
 8002262:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	663b      	str	r3, [r7, #96]	@ 0x60
 800226e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800227c:	4649      	mov	r1, r9
 800227e:	008b      	lsls	r3, r1, #2
 8002280:	4641      	mov	r1, r8
 8002282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002286:	4641      	mov	r1, r8
 8002288:	008a      	lsls	r2, r1, #2
 800228a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800228e:	f7fd ffa3 	bl	80001d8 <__aeabi_uldivmod>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <UART_SetConfig+0x4e4>)
 8002298:	fba3 1302 	umull	r1, r3, r3, r2
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	2164      	movs	r1, #100	@ 0x64
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	3332      	adds	r3, #50	@ 0x32
 80022aa:	4a08      	ldr	r2, [pc, #32]	@ (80022cc <UART_SetConfig+0x4e4>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	f003 020f 	and.w	r2, r3, #15
 80022b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4422      	add	r2, r4
 80022be:	609a      	str	r2, [r3, #8]
}
 80022c0:	bf00      	nop
 80022c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80022c6:	46bd      	mov	sp, r7
 80022c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022cc:	51eb851f 	.word	0x51eb851f

080022d0 <memset>:
 80022d0:	4402      	add	r2, r0
 80022d2:	4603      	mov	r3, r0
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d100      	bne.n	80022da <memset+0xa>
 80022d8:	4770      	bx	lr
 80022da:	f803 1b01 	strb.w	r1, [r3], #1
 80022de:	e7f9      	b.n	80022d4 <memset+0x4>

080022e0 <__libc_init_array>:
 80022e0:	b570      	push	{r4, r5, r6, lr}
 80022e2:	4d0d      	ldr	r5, [pc, #52]	@ (8002318 <__libc_init_array+0x38>)
 80022e4:	4c0d      	ldr	r4, [pc, #52]	@ (800231c <__libc_init_array+0x3c>)
 80022e6:	1b64      	subs	r4, r4, r5
 80022e8:	10a4      	asrs	r4, r4, #2
 80022ea:	2600      	movs	r6, #0
 80022ec:	42a6      	cmp	r6, r4
 80022ee:	d109      	bne.n	8002304 <__libc_init_array+0x24>
 80022f0:	4d0b      	ldr	r5, [pc, #44]	@ (8002320 <__libc_init_array+0x40>)
 80022f2:	4c0c      	ldr	r4, [pc, #48]	@ (8002324 <__libc_init_array+0x44>)
 80022f4:	f000 f818 	bl	8002328 <_init>
 80022f8:	1b64      	subs	r4, r4, r5
 80022fa:	10a4      	asrs	r4, r4, #2
 80022fc:	2600      	movs	r6, #0
 80022fe:	42a6      	cmp	r6, r4
 8002300:	d105      	bne.n	800230e <__libc_init_array+0x2e>
 8002302:	bd70      	pop	{r4, r5, r6, pc}
 8002304:	f855 3b04 	ldr.w	r3, [r5], #4
 8002308:	4798      	blx	r3
 800230a:	3601      	adds	r6, #1
 800230c:	e7ee      	b.n	80022ec <__libc_init_array+0xc>
 800230e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002312:	4798      	blx	r3
 8002314:	3601      	adds	r6, #1
 8002316:	e7f2      	b.n	80022fe <__libc_init_array+0x1e>
 8002318:	08002360 	.word	0x08002360
 800231c:	08002360 	.word	0x08002360
 8002320:	08002360 	.word	0x08002360
 8002324:	08002364 	.word	0x08002364

08002328 <_init>:
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	bf00      	nop
 800232c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232e:	bc08      	pop	{r3}
 8002330:	469e      	mov	lr, r3
 8002332:	4770      	bx	lr

08002334 <_fini>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	bf00      	nop
 8002338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233a:	bc08      	pop	{r3}
 800233c:	469e      	mov	lr, r3
 800233e:	4770      	bx	lr
